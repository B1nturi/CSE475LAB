# -*- coding: utf-8 -*-
"""2021-2-60-071_CNN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10TM8JSYwN5vSabzA8Wbv9cp6PJQcGslc

A Convolutional Neural Network (ConvNet/CNN) is a Deep Learning algorithm which can take in an input image, assign importance (learnable weights and biases) to various aspects/objects in the image and be able to differentiate one from the other. The pre-processing required in a ConvNet is much lower as compared to other classification algorithms. While in primitive methods filters are hand-engineered, with enough training, ConvNets have the ability to learn these filters/characteristics.
"""

import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt

(train_images, train_labels), (test_images, test_labels) = datasets.cifar10.load_data()

# Normalize pixel values to be between 0 and 1
train_images, test_images = train_images / 255.0, test_images / 255.0

class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer',
               'dog', 'frog', 'horse', 'ship', 'truck']

plt.figure(figsize=(8,8))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(train_images[i])
    # The CIFAR labels happen to be arrays,
    #which is why we need the extra index
    plt.xlabel(class_names[train_labels[i][0]])
plt.show()

"""The code below define the convolutional base using a common pattern: a stack of Conv2D and MaxPooling2D layers.

As input, a CNN takes tensors of shape (image_height, image_width, color_channels), ignoring the batch size. If you are new to these dimensions, color_channels refers to (R,G,B). In this example, you will configure our CNN to process inputs of shape (32, 32, 3), which is the format of CIFAR images. You can do this by passing the argument input_shape to our first layer.
"""

model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))

"""To complete our model, you will feed the last output tensor from the convolutional base (of shape (4, 4, 64)) into one or more Dense layers to perform classification. Dense layers take vectors as input (which are 1D), while the current output is a 3D tensor. First, you will flatten (or unroll) the 3D output to 1D, then add one or more Dense layers on top. CIFAR has 10 output classes, so you use a final Dense layer with 10 outputs."""

model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(10))

model.summary()

"""#Compile and train the model"""

# Adam is the best among the adaptive optimizers in most of the cases
model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

# An epoch means training the neural network with all the
# training data for one cycle. Here I use 10 epochs
history = model.fit(train_images, train_labels, epochs=10,
                    validation_data=(test_images, test_labels))

"""#Evaluate the model"""

test_loss, test_acc = model.evaluate(test_images,
                                     test_labels,
                                     verbose=2)

print('Test Accuracy is',test_acc)

plt.plot(history.history['accuracy'],label='accuracy')
plt.plot(history.history['val_accuracy'],label = 'val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0.5, 1])
plt.legend(loc='lower right')

"""# **VGG 19**"""

from tensorflow.keras.applications import VGG19

model_vgg = VGG19(weights='imagenet', include_top=False, input_shape=(32, 32, 3))

model_vgg.trainable = False

model_vgg = models.Sequential()
model_vgg.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)))
model_vgg.add(layers.MaxPooling2D((2, 2)))
model_vgg.add(layers.Conv2D(64, (3, 3), activation='relu'))
model_vgg.add(layers.MaxPooling2D((2, 2)))
model_vgg.add(layers.Conv2D(64, (3, 3), activation='relu'))

model_vgg.add(layers.Flatten())
model_vgg.add(layers.Dense(64, activation='relu'))
model_vgg.add(layers.Dense(10, activation='softmax'))

model_vgg.summary()

# Adam is the best among the adaptive optimizers in most of the cases
model_vgg.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

# An epoch means training the neural network with all the
# training data for one cycle. Here I use 10 epochs
history_vgg = model_vgg.fit(train_images, train_labels, epochs=10,
                    validation_data=(test_images, test_labels))

test_loss, test_acc = model_vgg.evaluate(test_images,
                                     test_labels,
                                     verbose=2)

print('Train Accuracy is', max(history_vgg.history['accuracy']))
print('Test Accuracy is', test_acc)
print('Validation Accuracy is', max(history_vgg.history['val_accuracy']))

plt.figure(figsize=(10,5))
plt.subplot(1,2,1)
plt.plot(history_vgg.history['accuracy'], label = 'Training Accuracy')
plt.plot(history_vgg.history['val_accuracy'], label = 'Validation Accuracy')
plt.title('Accuracy')
plt.legend(loc='lower right')

plt.subplot(1,2,2)
plt.plot(history_vgg.history['loss'], label = 'Training Loss')
plt.plot(history_vgg.history['val_loss'], label = 'Validation Loss')
plt.title('Loss')
plt.legend(loc='lower left')

import numpy as np
from sklearn.metrics import confusion_matrix, classification_report

predictions = model.predict(test_images)

# Convert predictions to class labels
predicted_classes = np.argmax(predictions, axis=1)

# Get true labels
true_classes = test_labels

# Compute confusion matrix
conf_matrix = confusion_matrix(true_classes, predicted_classes)

import seaborn as sns
import matplotlib.pyplot as plt

# Assuming you have conf_matrix and test_generator defined

sns.set(font_scale=0.8)

# Set the figure size
plt.figure(figsize=(10, 8))

sns.heatmap(conf_matrix, annot=True, fmt='d', cbar=False,
            linewidths=.5, square=True, annot_kws={"size": 12},
            xticklabels=class_names,
            yticklabels=class_names)

plt.title('Confusion Matrix of VGG19', fontsize=12)
plt.xlabel('Predicted', fontsize=12)
plt.ylabel('True', fontsize=12)

plt.grid(True, linestyle='--', alpha=1)

# Show the plot
plt.show()

report = classification_report(true_classes, predicted_classes, target_names=class_names)
print("Classification Report:\n", report)

# Calculate accuracy, precision, recall, and F1 score
vgg_accuracy = np.sum(np.diag(conf_matrix)) / np.sum(conf_matrix)
vgg_precision = np.diag(conf_matrix) / np.sum(conf_matrix, axis=0)
vgg_recall = np.diag(conf_matrix) / np.sum(conf_matrix, axis=1)
vgg_f1_score = 2 * (vgg_precision * vgg_recall) / (vgg_precision + vgg_recall)

print("Accuracy:", vgg_accuracy)
print("Precision:", vgg_precision)
print("Recall:", vgg_recall)
print("F1 Score:", vgg_f1_score)

"""# **DenseNet 121**"""

from tensorflow.keras.applications import DenseNet121

model_dnet = DenseNet121(weights='imagenet', include_top=False, input_shape=(32, 32, 3))

model_dnet.trainable = False

model_dnet = models.Sequential()
model_dnet.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)))
model_dnet.add(layers.MaxPooling2D((2, 2)))
model_dnet.add(layers.Conv2D(64, (3, 3), activation='relu'))
model_dnet.add(layers.MaxPooling2D((2, 2)))
model_dnet.add(layers.Conv2D(64, (3, 3), activation='relu'))

model_dnet.add(layers.Flatten())
model_dnet.add(layers.Dense(64, activation='relu'))
model_dnet.add(layers.Dense(10))

model_dnet.summary()

# Adam is the best among the adaptive optimizers in most of the cases
model_dnet.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

# An epoch means training the neural network with all the
# training data for one cycle. Here I use 10 epochs
history_dnet = model_dnet.fit(train_images, train_labels, epochs=10,
                    validation_data=(test_images, test_labels))

test_loss, test_acc = model_dnet.evaluate(test_images,
                                     test_labels,
                                     verbose=2)

print('Train Accuracy is', max(history_dnet.history['accuracy']))
print('Test Accuracy is', test_acc)
print('Validation Accuracy is', max(history_dnet.history['val_accuracy']))

plt.figure(figsize=(10,5))
plt.subplot(1,2,1)
plt.plot(history_dnet.history['accuracy'], label = 'Training Accuracy')
plt.plot(history_dnet.history['val_accuracy'], label = 'Validation Accuracy')
plt.title('Accuracy')
plt.legend(loc='lower right')

plt.subplot(1,2,2)
plt.plot(history_dnet.history['loss'], label = 'Training Loss')
plt.plot(history_dnet.history['val_loss'], label = 'Validation Loss')
plt.title('Loss')
plt.legend(loc='lower left')

predictions = model_dnet.predict(test_images)

# Convert predictions to class labels
predicted_classes = np.argmax(predictions, axis=1)

# Get true labels
true_classes = test_labels

# Compute confusion matrix
conf_matrix = confusion_matrix(true_classes, predicted_classes)

sns.set(font_scale=0.8)

# Set the figure size
plt.figure(figsize=(10, 8))

sns.heatmap(conf_matrix, annot=True, fmt='d', cbar=False,
            linewidths=.5, square=True, annot_kws={"size": 12},
            xticklabels=class_names,
            yticklabels=class_names)

plt.title('Confusion Matrix of DenseNet121', fontsize=12)
plt.xlabel('Predicted', fontsize=12)
plt.ylabel('True', fontsize=12)

plt.grid(True, linestyle='--', alpha=1)

# Show the plot
plt.show()

report = classification_report(true_classes, predicted_classes, target_names=class_names)
print("Classification Report:\n", report)

# Calculate accuracy, precision, recall, and F1 score
dnet_accuracy = np.sum(np.diag(conf_matrix)) / np.sum(conf_matrix)
dnet_precision = np.diag(conf_matrix) / np.sum(conf_matrix, axis=0)
dnet_recall = np.diag(conf_matrix) / np.sum(conf_matrix, axis=1)
dnet_f1_score = 2 * (dnet_precision * dnet_recall) / (dnet_precision + dnet_recall)

print("Accuracy:", dnet_accuracy)
print("Precision:", dnet_precision)
print("Recall:", dnet_recall)
print("F1 Score:", dnet_f1_score)

"""# **EfficientNet B0**"""

from tensorflow.keras.applications import EfficientNetB0

model_enet = EfficientNetB0(weights='imagenet', include_top=False, input_shape=(32, 32, 3))

model_enet.trainable = False

model_enet = models.Sequential()
model_enet.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)))
model_enet.add(layers.MaxPooling2D((2, 2)))
model_enet.add(layers.Conv2D(64, (3, 3), activation='relu'))
model_enet.add(layers.MaxPooling2D((2, 2)))
model_enet.add(layers.Conv2D(64, (3, 3), activation='relu'))

model_enet.add(layers.Flatten())
model_enet.add(layers.Dense(64, activation='relu'))
model_enet.add(layers.Dense(10))

model_enet.summary()

# Adam is the best among the adaptive optimizers in most of the cases
model_enet.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

# An epoch means training the neural network with all the
# training data for one cycle. Here I use 10 epochs
history_enet = model_enet.fit(train_images, train_labels, epochs=10,
                    validation_data=(test_images, test_labels))

test_loss, test_acc = model_enet.evaluate(test_images,
                                     test_labels,
                                     verbose=2)

print('Train Accuracy is', max(history_enet.history['accuracy']))
print('Test Accuracy is', test_acc)
print('Validation Accuracy is', max(history_enet.history['val_accuracy']))

plt.figure(figsize=(10,5))
plt.subplot(1,2,1)
plt.plot(history_enet.history['accuracy'], label = 'Training Accuracy')
plt.plot(history_enet.history['val_accuracy'], label = 'Validation Accuracy')
plt.title('Accuracy')
plt.legend(loc='lower right')

plt.subplot(1,2,2)
plt.plot(history_enet.history['loss'], label = 'Training Loss')
plt.plot(history_enet.history['val_loss'], label = 'Validation Loss')
plt.title('Loss')
plt.legend(loc='lower left')

predictions = model_enet.predict(test_images)

# Convert predictions to class labels
predicted_classes = np.argmax(predictions, axis=1)

# Get true labels
true_classes = test_labels

# Compute confusion matrix
conf_matrix = confusion_matrix(true_classes, predicted_classes)

sns.set(font_scale=0.8)

# Set the figure size
plt.figure(figsize=(10, 8))

sns.heatmap(conf_matrix, annot=True, fmt='d', cbar=False,
            linewidths=.5, square=True, annot_kws={"size": 12},
            xticklabels=class_names,
            yticklabels=class_names)

plt.title('Confusion Matrix of DenseNet121', fontsize=12)
plt.xlabel('Predicted', fontsize=12)
plt.ylabel('True', fontsize=12)

plt.grid(True, linestyle='--', alpha=1)

# Show the plot
plt.show()

report = classification_report(true_classes, predicted_classes, target_names=class_names)
print("Classification Report:\n", report)

# Calculate accuracy, precision, recall, and F1 score
enet_accuracy = np.sum(np.diag(conf_matrix)) / np.sum(conf_matrix)
enet_precision = np.diag(conf_matrix) / np.sum(conf_matrix, axis=0)
enet_recall = np.diag(conf_matrix) / np.sum(conf_matrix, axis=1)
enet_f1_score = 2 * (enet_precision * enet_recall) / (enet_precision + enet_recall)

print("Accuracy:", enet_accuracy)
print("Precision:", enet_precision)
print("Recall:", enet_recall)
print("F1 Score:", enet_f1_score)

import pandas as pd
comparison = pd.DataFrame({
    'Model': ['VGG19', 'DenseNet121', 'EfficientNetB0'],
    'Accuracy': [vgg_accuracy, dnet_accuracy, enet_accuracy],
    'Precision': [max(vgg_precision), max(dnet_precision), max(enet_precision)],
    'Recall': [max(vgg_recall),max(dnet_recall),max(enet_recall)],
    'F1 Score': [max(vgg_f1_score),max(dnet_f1_score),max(enet_f1_score)]
})

comparison