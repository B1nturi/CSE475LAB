# -*- coding: utf-8 -*-
"""2021-2-60-071_NN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UzROvthP71r8b2n4cyBfM8rmQ02Br-R_
"""

import numpy as np
import pandas as pd
import seaborn as sns
sns.set(style="darkgrid")
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure
from scipy import stats
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

df = pd.read_csv("/content/drive/MyDrive/CSE475/Lab_06/heart.csv")

df.head()

df.isnull().sum()

df.duplicated().sum()

df.info()

df['Sex'].unique()

df['ChestPainType'].unique()

df['RestingECG'].unique()

df['ExerciseAngina'].unique()

df['ST_Slope'].unique()

mappings = {
    "Sex": {"M": 1, "F": 2},
    "ChestPainType": {"ATA": 1, "NAP": 2, "ASY": 3, "TA": 4},
    "RestingECG": {"Normal": 1, "ST": 2, "LVH": 3},
    "ExerciseAngina": {"N": 0, "Y": 1},
    "ST_Slope": {"Up": 1, "Flat": 2, "Down": 3}
}

df.replace(mappings, inplace=True)

df.head()

correlation = df.corr()
correlation

plt.figure(figsize=(12,8), dpi=77)
sns.heatmap(correlation, linecolor='white',linewidths=0.1, annot=True)
plt.title('Correlation Matrix'.upper(), size=19, pad=13)
plt.xlabel('Heart Disease Data')
plt.ylabel('Heart Disease Data')
plt.xticks(rotation=33)
plt.show()

X = df.drop("HeartDisease", axis=1)
y = df["HeartDisease"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = Sequential()

model.add(Dense(units=8, activation='relu', input_shape=(X_train.shape[1],)))

model.add(Dense(units=4, activation='relu'))

model.add(Dense(units=4, activation='relu'))

model.add(Dense(units=1, activation='sigmoid'))

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

history = model.fit(X_train, y_train, epochs=50, batch_size=16, validation_split=0.2)

test_loss, test_accuracy = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {test_accuracy:.2f}")

y_pred = model.predict(X_test)
y_pred_classes = (y_pred > 0.5).astype(int)

plt.plot(history.history['accuracy'], label='Train Acc')
plt.plot(history.history['val_accuracy'], label='Val Acc')
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.show()