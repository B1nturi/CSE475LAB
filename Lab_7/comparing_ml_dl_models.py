# -*- coding: utf-8 -*-
"""Comparing_ML/DL_Models.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zj7GuJfzOQPuUqoeLN5OP6c320HrbItZ
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import RandomizedSearchCV
from sklearn import tree
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# Function
def performance_analysis(model, X_test, y_test):
    y_pred = model.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    prec = precision_score(y_test, y_pred, average='weighted')
    rec = recall_score(y_test, y_pred, average='weighted')
    f1 = f1_score(y_test, y_pred, average='weighted')

    print("Accuracy:", acc)
    print("Precision:", prec)
    print("Recall:", rec)
    print("F1-Score:", f1)
    print("\n")

    cm = confusion_matrix(y_test, y_pred)
    cm_display = ConfusionMatrixDisplay(confusion_matrix = cm)
    cm_display.plot()
    plt.title("Confusion Matrix")
    plt.show()
    return acc, prec, rec, f1

df = pd.read_csv('/content/drive/MyDrive/CSE475/Lab_07/heart_disease_uci.csv')
df

df.info()

df.isnull().sum()

median_value = df['trestbps'].median()
median_value

df['trestbps'] = df['trestbps'].fillna(median_value)

median_value = df['chol'].median()
median_value

df['chol'] = df['chol'].fillna(median_value)

mode_value = df['fbs'].mode()[0]
mode_value

df['fbs'] = df['fbs'].fillna(mode_value)

mode_value = df['restecg'].mode()[0]
mode_value

df['restecg'] = df['restecg'].fillna(mode_value)

median_value = df['thalch'].median()
median_value

df['thalch'] = df['thalch'].fillna(median_value)

mode_value = df['exang'].mode()[0]
mode_value

df['exang'] = df['exang'].fillna(mode_value)

median_value = df['oldpeak'].median()
median_value

df['oldpeak'] = df['oldpeak'].fillna(median_value)

mode_value = df['slope'].mode()[0]
mode_value

df['slope'] = df['slope'].fillna(mode_value)

median_value = df['ca'].median()
median_value

df['ca'] = df['ca'].fillna(median_value)

mode_value = df['thal'].mode()[0]
mode_value

df['thal'] = df['thal'].fillna(mode_value)

df.isnull().sum()

df.duplicated().sum()

mappings = {
    "sex": {"Male": 1, "Female": 2},
    "dataset": {'Cleveland': 1, 'Hungary': 2, 'Switzerland': 3, 'VA Long Beach': 4},
    "cp": {'typical angina': 1, 'asymptomatic': 2, 'non-anginal': 3, 'atypical angina': 4},
    "fbs": {False: 0, True: 1},
    "restecg": {'lv hypertrophy': 1, 'normal': 2, 'st-t abnormality': 3},
    "exang": {False: 0, True: 1},
    "slope": {'downsloping': 1, 'flat': 2, 'upsloping': 3},
    "thal": {'fixed defect': 1, 'normal': 2, 'reversable defect': 3}
}

df.replace(mappings, inplace=True)

df

df.drop(columns=['id'], inplace=True)

correlation = df.corr()
correlation

plt.figure(figsize=(12,8), dpi=77)
sns.heatmap(correlation, linecolor='white',linewidths=0.1, annot=True)
plt.title('Correlation Matrix'.upper(), size=19, pad=13)
plt.xlabel('Heart Disease Data')
plt.ylabel('Heart Disease Data')
plt.xticks(rotation=33)
plt.show()

X=df.drop(columns=['num'])
y=df['num']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""# **SVM**"""

svm = SVC(kernel='linear', C=1.0, random_state=42)

svm.fit(X_train, y_train)

svm_metrics = performance_analysis(svm, X_test, y_test)

"""# **Decision Tree**"""

dtree = DecisionTreeClassifier()
dtree = dtree.fit(X_train, y_train)

features = ['age', 'sex', 'dataset', 'cp', 'trestbps', 'chol', 'fbs', 'restecg',
       'thalch', 'exang', 'oldpeak', 'slope', 'ca', 'thal']
tree.plot_tree(dtree, feature_names=features)

dtree_metrics = performance_analysis(dtree, X_test, y_test)

"""# **Random Forest**"""

rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

rf_metrics = performance_analysis(rf, X_test, y_test)

"""# **Neural Network**"""

model = Sequential()

model.add(Dense(units=32, activation='relu', input_shape=(X_train.shape[1],)))

model.add(Dense(units=16, activation='relu'))

model.add(Dense(units=8, activation='relu'))

model.add(Dense(units=5, activation='softmax'))

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

history = model.fit(X_train, y_train, epochs=50, batch_size=16, validation_split=0.2)

test_loss, test_accuracy = model.evaluate(X_test, y_test)
print(f"Test Accuracy: {test_accuracy:.2f}")

y_pred = model.predict(X_test)
y_pred_classes = np.argmax(y_pred, axis=1)

cm = confusion_matrix(y_test, y_pred_classes)

plt.figure(figsize=(8,6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',
            xticklabels=[f'{i}' for i in range(5)],
            yticklabels=[f'{i}' for i in range(5)])
plt.ylabel('Actual')
plt.xlabel('Predicted')
plt.title('Confusion Matrix')
plt.show()

ann_accuracy = accuracy_score(y_test, y_pred_classes)
ann_precision = precision_score(y_test, y_pred_classes, average='weighted')
ann_recall = recall_score(y_test, y_pred_classes, average='weighted')
ann_f1 = f1_score(y_test, y_pred_classes, average='weighted')

# Add ANN to comparison DataFrame
comparison = pd.DataFrame({
    'Model': ['SVM', 'Decision Tree', 'Random Forest', 'ANN'],
    'Accuracy': [svm_metrics[0], dtree_metrics[0], rf_metrics[0], ann_accuracy],
    'Precision': [svm_metrics[1], dtree_metrics[1], rf_metrics[1], ann_precision],
    'Recall': [svm_metrics[2], dtree_metrics[2], rf_metrics[2], ann_recall],
    'F1 Score': [svm_metrics[3], dtree_metrics[3], rf_metrics[3], ann_f1]
})

print(comparison)