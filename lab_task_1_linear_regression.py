# -*- coding: utf-8 -*-
"""Lab_Task_1_Linear_Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H_q_RjMEQQjFGipdoiG5JFnszshKRFXN
"""

from google.colab import drive
drive.mount('/content/drive')

# Importing the Dataset

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# Load dataset
dataset = pd.read_csv('/content/drive/MyDrive/CSE475/Lab_01/Dataset/Airline_customer_satisfaction.csv')
dataset

dataset.head()

dataset.tail()

dataset.isnull().sum()

mode_value = dataset['Arrival Delay in Minutes'].mode()[0]
mode_value

dataset['Arrival Delay in Minutes'] = dataset['Arrival Delay in Minutes'].fillna(mode_value)

dataset.isnull().sum()

dataset.duplicated().sum()

dataset_copy = dataset.copy()

sns.countplot(x='satisfaction', data=dataset_copy)
plt.title('Satisfaction Count')
plt.show()

sns.histplot(dataset_copy['Flight Distance'], kde=True)
plt.title('Flight Distance Distribution')
plt.show()

sns.boxplot(x='Class', y='Flight Distance', data=dataset_copy)
plt.title('Class vs Flight Distance')
plt.show()

sns.barplot(x='Type of Travel', y='satisfaction', data=dataset_copy)
plt.title('Travel Type vs Satisfaction')
plt.show()

sns.boxplot(x='Customer Type', y='Age', data=dataset_copy)
plt.title('Class vs Flight Distance')
plt.show()

dataset['satisfaction'].value_counts()

# Define the mapping dictionary
satisfaction_mapping = {
    'satisfied': 1,
    'dissatisfied': 0
}

# Apply the mapping
dataset['satisfaction'] = dataset['satisfaction'].map(satisfaction_mapping)

dataset['Customer Type'].value_counts()

# Define the mapping dictionary
customer_type_mapping = {
    'Loyal Customer': 1,
    'disloyal Customer': 0
}

# Apply the mapping
dataset['Customer Type'] = dataset['Customer Type'].map(customer_type_mapping)

dataset['Type of Travel'].value_counts()

# Define the mapping dictionary
typeOfTravel_mapping = {
    'Business travel': 1,
    'Personal Travel': 2
}

# Apply the mapping
dataset['Type of Travel'] = dataset['Type of Travel'].map(typeOfTravel_mapping)

dataset['Class'].value_counts()

# Define the mapping dictionary
class_mapping = {
    'Business': 1,
    'Eco': 2,
    'Eco Plus': 3
}

# Apply the mapping
dataset['Class'] = dataset['Class'].map(class_mapping)

dataset

correlation = dataset.corr()
correlation

plt.figure(figsize=(18,12), dpi=77)
sns.heatmap(correlation, linecolor='white',linewidths=0.1, annot=True)
plt.title('Correlation Matrix'.upper(), size=19, pad=13)
plt.xlabel('Airline Customer Satisfaction Data')
plt.ylabel('Airline Customer Satisfaction Data')
plt.xticks(rotation=33)
plt.show()

X = dataset[['satisfaction','Customer Type','Age','Type of Travel','Class']]
y=dataset[['Food and drink','Seat comfort','Online support','Cleanliness','Arrival Delay in Minutes']]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)
print(X_train)
print(y_train)
print(X_test)
print(y_test)

print(X_train.shape)
print(y_train.shape)

from sklearn.linear_model import LinearRegression
regressor = LinearRegression()
regressor.fit(X_train, y_train)

# Predicting the values of the Test Set

y_pred = regressor.predict(X_test)
print(y_pred)

# Estimated coefficients and intercept for the linear regression

print(regressor.coef_)

print(regressor.intercept_)

# Visualizing the Correlation

plt.scatter(X_train, y_train, color = 'red')
plt.scatter(X_train, regressor.predict(X_train), color = 'blue')
plt.plot(X_train, regressor.predict(X_train), color = 'blue')
plt.title('X vs Y (Training set)')
plt.xlabel('X')
plt.ylabel('Y')
plt.show()

from sklearn.metrics import mean_squared_error
mean_squared_error(y_test, y_pred)

from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# Calculate RMSE
rmse = mean_squared_error(y_test, y_pred)**0.5
print(f"Root Mean Squared Error (RMSE): {rmse}")

# Calculate MAE
mae = mean_absolute_error(y_test, y_pred)
print(f"Mean Absolute Error (MAE): {mae}")

# Calculate R-squared
r2 = r2_score(y_test, y_pred)
print(f"R-squared (R2): {r2}")