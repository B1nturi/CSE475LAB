# -*- coding: utf-8 -*-
"""Lab_Task_1_Logistic_Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14hn87DqeUVn6jE0i-Fu9gNzBP-9aW7e8
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, mean_absolute_error, mean_squared_error,classification_report
from sklearn.linear_model import LogisticRegression

df = pd.read_excel('/content/drive/MyDrive/CSE475/Lab_01/Dataset/lung_disease.xlsx')
df

df.head()

df.tail()

df.isnull().sum()

df.duplicated().sum()

df_copy = df.copy()

sns.countplot(x='Risk', data=df_copy)
plt.title('Risk Distribution')
plt.show()

sns.histplot(df_copy['AGE'], kde=True)
plt.title('Age Distribution')
plt.show()

sns.boxplot(x='smoke', y='FVC', data=df_copy)
plt.title('FVC vs Smoking')
plt.show()

sns.scatterplot(x='FVC', y='FEC1', hue='smoke', data=df_copy)
plt.title('FVC vs FEC1 by Smoke')
plt.show()

sns.heatmap(df_copy.corr(numeric_only=True), annot=True)
plt.title('Lung Data Correlation Matrix')
plt.show()

df['smoke'].value_counts()

# Define the mapping dictionary
smoke_mapping = {
    'T': 1,
    'F': 0
}

# Apply the mapping
df['smoke'] = df['smoke'].map(smoke_mapping)

df['PEFR'].value_counts()

# Define the mapping dictionary
pefr_mapping = {
    'T': 1,
    'F': 0
}

# Apply the mapping
df['PEFR'] = df['PEFR'].map(pefr_mapping)

df['O2'].value_counts()

# Define the mapping dictionary
o2_mapping = {
    'T': 1,
    'F': 0
}

# Apply the mapping
df['O2'] = df['O2'].map(o2_mapping)

df['ABG-P-O2'].value_counts()

# Define the mapping dictionary
abgpo2_mapping = {
    'T': 1,
    'F': 0
}

# Apply the mapping
df['ABG-P-O2'] = df['ABG-P-O2'].map(abgpo2_mapping)

df['ABG-P-CO2'].value_counts()

# Define the mapping dictionary
abgpco2_mapping = {
    'T': 1,
    'F': 0
}

# Apply the mapping
df['ABG-P-CO2'] = df['ABG-P-CO2'].map(abgpco2_mapping)

df['ABG-pH Level'].value_counts()

# Define the mapping dictionary
abgph_level_mapping = {
    'T': 1,
    'F': 0
}

# Apply the mapping
df['ABG-pH Level'] = df['ABG-pH Level'].map(abgph_level_mapping)

df['Scan'].value_counts()

# Define the mapping dictionary
scan_mapping = {
    'MRI': 1,
    'X-ray': 2,
    'CT': 3,
}

# Apply the mapping
df['Scan'] = df['Scan'].map(scan_mapping)

df['Asthama'].value_counts()

# Define the mapping dictionary
asthama_mapping = {
    'T': 1,
    'F': 0
}

# Apply the mapping
df['Asthama'] = df['Asthama'].map(asthama_mapping)

df['Other diseaes'].value_counts()

# Define the mapping dictionary
other_diseaes_mapping = {
    'T': 1,
    'F': 0
}

# Apply the mapping
df['Other diseaes'] = df['Other diseaes'].map(other_diseaes_mapping)

df['Risk'].value_counts()

# Define the mapping dictionary
risk_mapping = {
    'T': 1,
    'F': 0
}

# Apply the mapping
df['Risk'] = df['Risk'].map(risk_mapping)

df

df.drop(columns=['Patient'],inplace=True)

correlation = df.corr()
correlation

plt.figure(figsize=(12,8), dpi=77)
sns.heatmap(correlation, linecolor='white',linewidths=0.1, annot=True)
plt.title('Correlation Matrix'.upper(), size=19, pad=13)
plt.xlabel('Lung Disease Data')
plt.ylabel('Lung Disease Data')
plt.xticks(rotation=33)
plt.show()

X=df.drop(columns=['Risk'])
y=df['Risk']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)

model = LogisticRegression(class_weight='balanced', max_iter=2000)

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

print(y_pred)

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report

# Classification report
print(classification_report(y_test, y_pred))

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

# Calculate precision
precision = precision_score(y_test, y_pred)
print("Precision:", precision)

# Calculate recall (sensitivity)
recall = recall_score(y_test, y_pred)
print("Recall (Sensitivity):", recall)

# Calculate F1-score
f1 = f1_score(y_test, y_pred)
print("F1-Score:", f1)

#confuison matrix for lung disease dataset
import matplotlib.pyplot as plt
from sklearn import metrics
confusion_matrix = metrics.confusion_matrix(y_test,y_pred)
cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix, display_labels = [False, True])
cm_display.plot()
plt.show()