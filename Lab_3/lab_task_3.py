# -*- coding: utf-8 -*-
"""Lab_Task_3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ECJZdPdOJS_rpKWiEEgAAGwBuSwYmHW_
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, mean_absolute_error, mean_squared_error,classification_report

df = pd.read_csv('/content/drive/MyDrive/CSE475/Lab_03/diabetes_data.csv')
df

df.head()

df.tail()

df.isnull().sum()

df.info()

median_value = df['Age'].median()
median_value

df['Age'] = df['Age'].fillna(median_value)

mode_value = df['Gender'].mode()[0]
mode_value

df['Gender'] = df['Gender'].fillna(mode_value)

mode_value = df['muscle stiffness'].mode()[0]
mode_value

df['muscle stiffness'] = df['muscle stiffness'].fillna(mode_value)

df.isnull().sum()

df.duplicated().sum()

df.drop_duplicates(inplace=True)

df.duplicated().sum()

df

df_copy = df.copy()

df['Gender'].value_counts()

# Define the mapping dictionary
gender_mapping = {
    'Male': 1,
    'Female': 2,
}

# Apply the mapping
df['Gender'] = df['Gender'].map(gender_mapping)

df['Polyuria'].value_counts()

# Define the mapping dictionary
mapping = {
    'No': 0,
    'Yes': 1,
}

# Apply the mapping
df['Polyuria'] = df['Polyuria'].map(mapping)

df['Polydipsia'].value_counts()

# Define the mapping dictionary
mapping = {
    'No': 0,
    'Yes': 1,
}

# Apply the mapping
df['Polydipsia'] = df['Polydipsia'].map(mapping)

df['sudden weight loss'].value_counts()

# Define the mapping dictionary
mapping = {
    'No': 0,
    'Yes': 1,
}

# Apply the mapping
df['sudden weight loss'] = df['sudden weight loss'].map(mapping)

df['weakness'].value_counts()

# Define the mapping dictionary
mapping = {
    'No': 0,
    'Yes': 1,
}

# Apply the mapping
df['weakness'] = df['weakness'].map(mapping)

df['Polyphagia'].value_counts()

# Define the mapping dictionary
mapping = {
    'No': 0,
    'Yes': 1,
}

# Apply the mapping
df['Polyphagia'] = df['Polyphagia'].map(mapping)

df['Genital thrush'].value_counts()

# Define the mapping dictionary
mapping = {
    'No': 0,
    'Yes': 1,
}

# Apply the mapping
df['Genital thrush'] = df['Genital thrush'].map(mapping)

df['visual blurring'].value_counts()

# Define the mapping dictionary
mapping = {
    'No': 0,
    'Yes': 1,
}

# Apply the mapping
df['visual blurring'] = df['visual blurring'].map(mapping)

df['Itching'].value_counts()

# Define the mapping dictionary
mapping = {
    'No': 0,
    'Yes': 1,
}

# Apply the mapping
df['Itching'] = df['Itching'].map(mapping)

df['Irritability'].value_counts()

# Define the mapping dictionary
mapping = {
    'No': 0,
    'Yes': 1,
}

# Apply the mapping
df['Irritability'] = df['Irritability'].map(mapping)

df['delayed healing'].value_counts()

# Define the mapping dictionary
mapping = {
    'No': 0,
    'Yes': 1,
}

# Apply the mapping
df['delayed healing'] = df['delayed healing'].map(mapping)

df['partial paresis'].value_counts()

# Define the mapping dictionary
mapping = {
    'No': 0,
    'Yes': 1,
}

# Apply the mapping
df['partial paresis'] = df['partial paresis'].map(mapping)

df['muscle stiffness'].value_counts()

# Define the mapping dictionary
mapping = {
    'No': 0,
    'Yes': 1,
}

# Apply the mapping
df['muscle stiffness'] = df['muscle stiffness'].map(mapping)

df['Alopecia'].value_counts()

# Define the mapping dictionary
mapping = {
    'No': 0,
    'Yes': 1,
}

# Apply the mapping
df['Alopecia'] = df['Alopecia'].map(mapping)

df['Obesity'].value_counts()

# Define the mapping dictionary
mapping = {
    'No': 0,
    'Yes': 1,
}

# Apply the mapping
df['Obesity'] = df['Obesity'].map(mapping)

df['class'].value_counts()

# Define the mapping dictionary
mapping = {
    'Negative': 0,
    'Positive': 1,
}

# Apply the mapping
df['class'] = df['class'].map(mapping)

df

# Counting the number of males and females
gender_counts = df_copy['Gender'].value_counts()
gender_counts

# Create a pie chart
plt.figure(figsize=(6, 6))  # Set the figure size
plt.pie(gender_counts, labels=gender_counts.index, autopct='%1.1f%%', startangle=140)

# Add a title
plt.title('Gender Distribution')

# Show the pie chart
plt.show()

# sns.countplot(x='Qualified', data=df_copy, palette='viridis')
# plt.title('Qualified vs Disqualified Drivers License')
# plt.show()

# plt.figure(figsize=(12, 8))
# sns.boxplot(x='Training', y='Confidence', hue='Gender', data=df_copy)

# # Add a title and labels
# plt.title('Confidence Distribution by Gender and Training')
# plt.xlabel('Training')
# plt.ylabel('Confidence')


# # Display the plot
# plt.show()

# plt.figure(figsize=(10, 6))
# plt.hist(df_copy['Speed Control'], bins=30, edgecolor='black')

# # Add a title and labels
# plt.title('Distribution of Speed Control')
# plt.xlabel('Speed Control')
# plt.ylabel('Frequency')

# # Display the plot
# plt.show()

correlation = df.corr()
correlation

plt.figure(figsize=(12,8), dpi=77)
sns.heatmap(correlation, linecolor='white',linewidths=0.1, annot=True)
plt.title('Correlation Matrix'.upper(), size=19, pad=13)
plt.xlabel('Drivers License Data')
plt.ylabel('Drivers License Data')
plt.xticks(rotation=33)
plt.show()

X=df.drop(columns=['class'])
Y=df['class']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

"""# **SVM**"""

from sklearn.svm import SVC

# Initialize the SVM model

model = SVC(kernel='linear', C=2.5, random_state=42)

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred_svm = model.predict(X_test)

print(y_pred_svm)

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred_svm)
print("Accuracy:", accuracy)

# Calculate precision
precision = precision_score(y_test, y_pred_svm)
print("Precision:", precision)

# Calculate recall (sensitivity)
recall = recall_score(y_test, y_pred_svm)
print("Recall (Sensitivity):", recall)

# Calculate F1-score
f1 = f1_score(y_test, y_pred_svm)
print("F1-Score:", f1)

#confuison matrix
import matplotlib.pyplot as plt
from sklearn import metrics
confusion_matrix = metrics.confusion_matrix(y_test,y_pred_svm)
cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix, display_labels = ['Negative', 'Positive'])
cm_display.plot()
plt.show()

"""# **Decision Tree**"""

from sklearn.tree import DecisionTreeClassifier
from sklearn import tree

dtree = DecisionTreeClassifier()
dtree = dtree.fit(X_train, y_train)

features = ['Age',
            'Gender',
            'Polyuria',
            'Polydipsia',
            'sudden weight loss',
            'weakness',
            'Polyphagia',
            'Genital thrush',
            'visual blurring',
            'Itching',
            'Irritability',
            'delayed healing',
            'partial paresis',
            'muscle stiffness',
            'Alopecia',
            'Obesity'
            ]
tree.plot_tree(dtree, feature_names=features)

y_pred_dt = dtree.predict(X_test)

print(y_pred_dt)

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred_dt)
print("Accuracy:", accuracy)

# Calculate precision
precision = precision_score(y_test, y_pred_dt)
print("Precision:", precision)

# Calculate recall (sensitivity)
recall = recall_score(y_test, y_pred_dt)
print("Recall (Sensitivity):", recall)

# Calculate F1-score
f1 = f1_score(y_test, y_pred_dt)
print("F1-Score:", f1)

#confuison matrix
import matplotlib.pyplot as plt
from sklearn import metrics
confusion_matrix = metrics.confusion_matrix(y_test,y_pred_dt)
cm_display = metrics.ConfusionMatrixDisplay(confusion_matrix = confusion_matrix, display_labels = ['Negative', 'Positive'])
cm_display.plot()
plt.show()

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

comparison = pd.DataFrame({
    'Model': ['SVM', 'Decision Tree'],
    'Accuracy': [accuracy_score(y_test, y_pred_svm), accuracy_score(y_test, y_pred_dt)],
    'Precision': [precision_score(y_test, y_pred_svm, average='macro'), precision_score(y_test, y_pred_dt, average='macro')],
    'Recall': [recall_score(y_test, y_pred_svm, average='macro'), recall_score(y_test, y_pred_dt, average='macro')],
    'F1 Score': [f1_score(y_test, y_pred_svm, average='macro'), f1_score(y_test, y_pred_dt, average='macro')]
})

print(comparison)